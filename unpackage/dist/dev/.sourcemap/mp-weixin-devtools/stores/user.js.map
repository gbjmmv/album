{"version":3,"names":["useUserStore","common_vendor","defineStore","userInfo","ref","sessionKey","getUserInfo","_ref","_asyncToGenerator2","_regeneratorRuntime2","mark","_callee","res","wrap","_callee$","_context","prev","next","api_user","getUserInfoAPI","sent","index","__f__","data","abrupt","t0","stop","apply","arguments","login","_ref2","_callee2","loginResult","_callee2$","_context2","code","loginAPI","value","setStorageSync","token","mainAlbumsId","success","showToast","title","icon","error","getStoredInfo","avatarUrl","updateProfile","_ref3","_callee3","profileData","_a","_b","updateData","_callee3$","_context3","nickname","trim","partner_id","String","avatarFile","updateUserProfileAPI","message","_x"],"sources":["user.js"],"sourcesContent":["// 管理登录\r\n// 储存token，返回用户主页渲染内容\r\n\r\nimport {defineStore} from 'pinia'\r\nimport {ref} from \"vue\";\r\nimport {loginAPI, updateUserProfileAPI, getUserInfoAPI} from \"/api/user.js\"\r\n\r\n\r\nexport const useUserStore = defineStore('user', () => {\r\n    const userInfo = ref([])\r\n    const sessionKey = ref('')\r\n\r\n    const getUserInfo = async () => {\r\n        try {\r\n            const res = await getUserInfoAPI()\r\n            console.log(\"pinia中第一时间收到的数据\", res.data)\r\n            return res.data\r\n        } catch (error) {\r\n            console.error('获取用户信息失败:', error)\r\n        }\r\n\r\n    }\r\n    const login = async () => {\r\n        try {\r\n            // 获取登录code\r\n            const loginResult = await uni.login()\r\n            console.log(loginResult.code)\r\n\r\n            // 调用登录接口\r\n            const res = await loginAPI(loginResult.code)\r\n\r\n            // 存储返回数据\r\n            sessionKey.value = res.data.sessionKey\r\n            userInfo.value = res.data.userInfo\r\n            console.log(\"res\", res)\r\n\r\n            // 储存token到本地\r\n            uni.setStorageSync('token', res.data.token)\r\n            uni.setStorageSync('main album', res.data.userInfo[0].mainAlbumsId)\r\n\r\n            return {success: true}\r\n        } catch (error) {\r\n            console.error('登录失败：', error)\r\n            uni.showToast({\r\n                title: '登录失败',\r\n                icon: 'none'\r\n            })\r\n            return {success: false, error}\r\n        }\r\n    }\r\n\r\n\r\n    // 获取存储的信息\r\n    const getStoredInfo = () => {\r\n        console.log(userInfo.value[0].avatarUrl)\r\n        return {userInfo: userInfo.value}\r\n    }\r\n\r\n    const updateProfile = async (profileData) => {\r\n        try {\r\n            const updateData = {\r\n                nickname: profileData.nickname?.trim(),\r\n                partner_id: profileData.partner_id ? String(profileData.partner_id).trim() : '',\r\n                avatarFile: profileData.avatarFile\r\n            }\r\n            console.log(\"store:updateData\", updateData)\r\n            const res = await updateUserProfileAPI(updateData)\r\n\r\n            if (res?.data?.userInfo) {\r\n                userInfo.value = res.data.userInfo\r\n            }\r\n            return {success: true, data: res.data}\r\n        } catch (error) {\r\n            console.error('更新个人资料失败:', error)\r\n            // 错误已在 API 层处理，这里不需要重复显示 Toast\r\n            return {success: false, error: error.message || '更新失败'}\r\n        }\r\n    }\r\n\r\n    return {\r\n        sessionKey,\r\n        userInfo,\r\n        login,\r\n        getStoredInfo,\r\n        updateProfile,\r\n        getUserInfo\r\n    }\r\n})\r\n"],"mappings":"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","ignoreList":[]}