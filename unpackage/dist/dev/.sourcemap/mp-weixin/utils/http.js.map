{"version":3,"file":"http.js","sources":["utils/http.js"],"sourcesContent":["const isDev = process.env.NODE_ENV === 'development'\r\n//const baseURL = isDev ? 'http://localhost:8080' : ''  // 生产环境URL待定\r\n\r\nconst baseURL = 'https://xinliang.fun/api/wx'\r\n//const baseURL = 'http://1.95.63.156:8080'\r\n\r\n\r\n// 创建请求对象\r\nconst httpRequest = {\r\n    config: {\r\n        baseURL,\r\n        header: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        timeout: 10000,\r\n    },\r\n\r\n    // 请求拦截\r\n    requestInterceptor(options) {\r\n        options.header = options.header || {};\r\n        const token = uni.getStorageSync('token')\r\n        if (token) {\r\n            options.header.Authorization = `Bearer ${token}`\r\n        }\r\n        options.url = baseURL + options.url\r\n        return options\r\n    },\r\n\r\n    // 响应拦截\r\n    responseInterceptor(response) {\r\n        const { statusCode, data } = response\r\n\r\n        if (statusCode >= 200 && statusCode < 300) {\r\n            return data\r\n        }\r\n\r\n        if (statusCode === 401) {\r\n            const userStore = useUserStore()\r\n            userStore.clearUserInfo()\r\n            uni.navigateTo({\r\n                url: '/pages/login/login'\r\n            })\r\n        }\r\n\r\n        uni.showToast({\r\n            title: data.message || '请求失败',\r\n            icon: 'none'\r\n        })\r\n\r\n        return Promise.reject(response)\r\n    },\r\n\r\n    // 请求方法\r\n    request(options = {}) {\r\n        options = { ...this.config, ...options }\r\n        options = this.requestInterceptor(options)\r\n\r\n        return new Promise((resolve, reject) => {\r\n            options.success = (response) => {\r\n                try {\r\n                    const res = this.responseInterceptor(response)\r\n                    resolve(res)\r\n                } catch (error) {\r\n                    reject(error)\r\n                }\r\n            }\r\n            options.fail = (error) => {\r\n                uni.showToast({\r\n                    title: '网络请求失败',\r\n                    icon: 'none'\r\n                })\r\n                reject(error)\r\n            }\r\n            uni.request(options)\r\n        })\r\n    },\r\n\r\n    upload(options = {}) {\r\n        const { url, filePath, formData = {} } = options;\r\n        const fileList = Array.isArray(filePath) ? filePath : [filePath];\r\n\r\n        const token = uni.getStorageSync('token');\r\n        const header = options.header || {};\r\n        if (token) {\r\n            header.Authorization = `Bearer ${token}`;\r\n        }\r\n\r\n        // Create an array of upload promises\r\n        const uploadPromises = fileList.map((file, index) => {\r\n            return new Promise((resolve, reject) => {\r\n                uni.uploadFile({\r\n                    url: baseURL + url,\r\n                    filePath: file,\r\n                    name: options.name || 'file', // 使用传入的name参数，默认为'file'\r\n                    formData: { ...formData, fileIndex: index },\r\n                    header,\r\n                    success: (response) => {\r\n                        console.log(`Upload response for file ${index}:`, response);\r\n                        try {\r\n                            const data = JSON.parse(response.data);\r\n                            resolve(data);\r\n                        } catch (error) {\r\n                            reject(error);\r\n                        }\r\n                    },\r\n                    fail: (error) => {\r\n                        console.error(`Upload failed for file ${index}:`, error);\r\n                        uni.showToast({\r\n                            title: `第${index + 1}个文件上传失败`,\r\n                            icon: 'none'\r\n                        });\r\n                        reject(error);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n\r\n        // Return all upload results\r\n        return Promise.all(uploadPromises)\r\n            .then(results => {\r\n                // If only one file was uploaded, return just that result\r\n                // Otherwise return the array of results\r\n                return fileList.length === 1 ? results[0] : results;\r\n            })\r\n            .catch(error => {\r\n                console.error('One or more uploads failed:', error);\r\n                throw error;\r\n            });\r\n    }\r\n}\r\n\r\n// 导出请求方法\r\nexport const http = {\r\n    get(url, data = {}, options = {}) {\r\n        return httpRequest.request({\r\n            ...options,\r\n            url,\r\n            data,\r\n            method: 'GET'\r\n        })\r\n    },\r\n\r\n    postJSON(url, data = {}, options = {}) {\r\n        return httpRequest.request({\r\n            ...options,\r\n            url,\r\n            data,\r\n            method: 'POST',\r\n            header: {\r\n                'content-type': 'application/json'\r\n            }\r\n        });\r\n    },\r\n\r\n    // 发送表单数据的 POST 请求\r\n    postForm(url, data = {}, options = {}) {\r\n        return httpRequest.request({\r\n            ...options,\r\n            url,\r\n            data,\r\n            method: 'POST',\r\n            header: {\r\n                'content-type': 'application/x-www-form-urlencoded'\r\n            }\r\n        });\r\n    },\r\n\r\n    // 新增的PUT方法 - JSON格式\r\n    put(url, data = {}, options = {}) {\r\n        return httpRequest.request({\r\n            ...options,\r\n            url,\r\n            data,\r\n            method: 'PUT',\r\n            header: {\r\n                'content-type': 'application/json'\r\n            }\r\n        });\r\n    },\r\n\r\n    // 新增的PUT方法 - 表单格式\r\n    putForm(url, data = {}, options = {}) {\r\n        return httpRequest.request({\r\n            ...options,\r\n            url,\r\n            data,\r\n            method: 'PUT',\r\n            header: {\r\n                'content-type': 'application/x-www-form-urlencoded'\r\n            }\r\n        });\r\n    },\r\n\r\n    // 新增的DELETE方法\r\n    delete(url, data = {}, options = {}) {\r\n        return httpRequest.request({\r\n            ...options,\r\n            url,\r\n            data,\r\n            method: 'DELETE'\r\n        });\r\n    },\r\n\r\n    upload(url, filePath, formData = {}, options = {}) {\r\n        return httpRequest.upload({\r\n            url,\r\n            filePath,\r\n            name: options.name || 'file',\r\n            formData,\r\n            ...options\r\n        })\r\n    }\r\n}"],"names":["uni"],"mappings":"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"}