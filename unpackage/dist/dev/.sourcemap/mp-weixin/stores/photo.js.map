{"version":3,"file":"photo.js","sources":["stores/photo.js"],"sourcesContent":["import {defineStore} from 'pinia'\r\nimport {ref} from 'vue'\r\nimport {\r\n    uploadPhotosAPI,\r\n    getPhotosBySubAlbumIdAPI,\r\n    getAlbumPhotosDetailAPI,\r\n    getPhotoDetailAPI,\r\n    addCommentAPI,\r\n    toggleFavoriteAPI,\r\n    deletePhotoAPI,\r\n    batchDeletePhotosAPI,\r\n    getFavoritePhotosAPI\r\n} from \"/api/photo.js\"\r\n\r\nexport const usePhotoStore = defineStore('photo', () => {\r\n\r\n    const currentAlbumPhotos = ref([])\r\n    const isLoading = ref(false)\r\n    const favoritePhotos = ref([])\r\n\r\n    /**\r\n     * 上传照片到指定相册\r\n     * @param {Array} filePaths - 照片本地路径数组\r\n     * @param {Number} subAlbumId - 小相册ID\r\n     * @param {Number} mainAlbumId - 大相册ID\r\n     * @returns {Promise<boolean>} - 上传是否成功\r\n     */\r\n    const uploadPhotos = async (filePaths, subAlbumId, mainAlbumId) => {\r\n        if (!filePaths || filePaths.length === 0) {\r\n            uni.showToast({\r\n                title: '请选择照片',\r\n                icon: 'none'\r\n            });\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            // 开始上传\r\n            const response = await uploadPhotosAPI(filePaths, subAlbumId, mainAlbumId);\r\n\r\n            if (response && (Array.isArray(response) ? response[0].code === 0 : response.code === 0)) {\r\n                uni.showToast({\r\n                    title: '上传成功',\r\n                    icon: 'success'\r\n                });\r\n                if (subAlbumId) {\r\n                    await getAlbumPhotos(subAlbumId);\r\n                }\r\n                return true;\r\n            } else {\r\n                uni.showToast({\r\n                    title: Array.isArray(response) ? response[0].msg : (response?.msg || '上传失败'),\r\n                    icon: 'none'\r\n                });\r\n                return false;\r\n            }\r\n        } catch (error) {\r\n            console.error('上传照片失败', error);\r\n            uni.showToast({\r\n                title: '上传照片失败',\r\n                icon: 'none'\r\n            });\r\n            return false;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * 获取相册照片列表\r\n     * @param {Number} subAlbumId - 小相册ID\r\n     */\r\n    const getAlbumPhotos = async (subAlbumId) => {\r\n        try {\r\n            isLoading.value = true\r\n            const result = await getAlbumPhotosDetailAPI(subAlbumId)\r\n\r\n            if (result && result.code === 0) {\r\n                currentAlbumPhotos.value = result.data || []\r\n                return result.data\r\n            } else {\r\n                uni.showToast({\r\n                    title: result?.msg || '获取照片失败',\r\n                    icon: 'none'\r\n                })\r\n                return []\r\n            }\r\n        } catch (error) {\r\n            console.error('获取相册照片失败', error)\r\n            uni.showToast({\r\n                title: '获取照片失败',\r\n                icon: 'none'\r\n            })\r\n            return []\r\n        } finally {\r\n            isLoading.value = false\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取照片详情（如果当前相册已加载则不重新请求）\r\n     * @param {Number} photoId - 照片ID\r\n     */\r\n    const getPhotoDetail = async (photoId) => {\r\n        // 先从当前相册中查找照片\r\n        const existingPhoto = currentAlbumPhotos.value.find(p => p.id === parseInt(photoId))\r\n        if (existingPhoto) {\r\n            return existingPhoto\r\n        }\r\n\r\n        // 如果相册中没有，则单独请求\r\n        try {\r\n            isLoading.value = true\r\n            const result = await getPhotoDetailAPI(photoId)\r\n\r\n            if (result && result.code === 0) {\r\n                return result.data\r\n            } else {\r\n                uni.showToast({\r\n                    title: result?.msg || '获取照片详情失败',\r\n                    icon: 'none'\r\n                })\r\n                return null\r\n            }\r\n        } catch (error) {\r\n            console.error('获取照片详情失败', error)\r\n            uni.showToast({\r\n                title: '获取照片详情失败',\r\n                icon: 'none'\r\n            })\r\n            return null\r\n        } finally {\r\n            isLoading.value = false\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 添加评论\r\n     * @param {Number} photoId - 照片ID\r\n     * @param {String} content - 评论内容\r\n     */\r\n    const addComment = async (photoId, content) => {\r\n        if (!content || content.trim() === '') {\r\n            uni.showToast({\r\n                title: '评论内容不能为空',\r\n                icon: 'none'\r\n            })\r\n            return false\r\n        }\r\n\r\n        try {\r\n            const result = await addCommentAPI(photoId, content)\r\n\r\n            if (result && result.code === 0) {\r\n                // 更新当前相册照片列表中的评论\r\n                const photoIndex = currentAlbumPhotos.value.findIndex(p => p.id === parseInt(photoId))\r\n                if (photoIndex > -1) {\r\n                    // 添加新评论到列表开头\r\n                    const newComment = result.data\r\n                    if (!currentAlbumPhotos.value[photoIndex].comments) {\r\n                        currentAlbumPhotos.value[photoIndex].comments = []\r\n                    }\r\n                    currentAlbumPhotos.value[photoIndex].comments.unshift(newComment)\r\n                }\r\n\r\n                uni.showToast({\r\n                    title: '评论成功',\r\n                    icon: 'success'\r\n                })\r\n                return true\r\n            } else {\r\n                uni.showToast({\r\n                    title: result?.msg || '评论失败',\r\n                    icon: 'none'\r\n                })\r\n                return false\r\n            }\r\n        } catch (error) {\r\n            console.error('添加评论失败', error)\r\n            uni.showToast({\r\n                title: '评论失败',\r\n                icon: 'none'\r\n            })\r\n            return false\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 收藏/取消收藏照片\r\n     * @param {Number} photoId - 照片ID\r\n     */\r\n    const toggleFavorite = async (photoId) => {\r\n        try {\r\n            const result = await toggleFavoriteAPI(photoId)\r\n\r\n            if (result && result.code === 0) {\r\n                // 更新当前相册照片列表中的收藏状态\r\n                const photoIndex = currentAlbumPhotos.value.findIndex(p => p.id === parseInt(photoId))\r\n                if (photoIndex > -1) {\r\n                    currentAlbumPhotos.value[photoIndex].isFavorite = result.data.isFavorite\r\n                }\r\n\r\n                return result.data\r\n            } else {\r\n                uni.showToast({\r\n                    title: result?.msg || '操作失败',\r\n                    icon: 'none'\r\n                })\r\n                return null\r\n            }\r\n        } catch (error) {\r\n            console.error('操作收藏失败', error)\r\n            uni.showToast({\r\n                title: '操作失败',\r\n                icon: 'none'\r\n            })\r\n            return null\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 删除照片\r\n     * @param {Number} photoId - 照片ID\r\n     */\r\n    const deletePhoto = async (photoId) => {\r\n        try {\r\n            const result = await deletePhotoAPI(photoId)\r\n\r\n            if (result && result.code === 0) {\r\n                // 从当前相册照片列表中移除\r\n                currentAlbumPhotos.value = currentAlbumPhotos.value.filter(p => p.id !== parseInt(photoId))\r\n\r\n                uni.showToast({\r\n                    title: '删除成功',\r\n                    icon: 'success'\r\n                })\r\n                return true\r\n            } else {\r\n                uni.showToast({\r\n                    title: result?.msg || '删除失败',\r\n                    icon: 'none'\r\n                })\r\n                return false\r\n            }\r\n        } catch (error) {\r\n            console.error('删除照片失败', error)\r\n            uni.showToast({\r\n                title: '删除失败',\r\n                icon: 'none'\r\n            })\r\n            return false\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 批量删除照片\r\n     * @param {Array} photoIds - 照片ID数组\r\n     */\r\n    const batchDeletePhotos = async (photoIds) => {\r\n        if (!photoIds || photoIds.length === 0) {\r\n            return false\r\n        }\r\n\r\n        try {\r\n            const result = await batchDeletePhotosAPI(photoIds)\r\n\r\n            if (result && result.code === 0) {\r\n                // 从当前相册照片列表中移除\r\n                currentAlbumPhotos.value = currentAlbumPhotos.value.filter(p => !photoIds.includes(p.id))\r\n\r\n                uni.showToast({\r\n                    title: '删除成功',\r\n                    icon: 'success'\r\n                })\r\n                return true\r\n            } else {\r\n                uni.showToast({\r\n                    title: result?.msg || '删除失败',\r\n                    icon: 'none'\r\n                })\r\n                return false\r\n            }\r\n        } catch (error) {\r\n            console.error('批量删除照片失败', error)\r\n            uni.showToast({\r\n                title: '删除失败',\r\n                icon: 'none'\r\n            })\r\n            return false\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取用户收藏的照片\r\n     */\r\n    const getFavoritePhotos = async () => {\r\n        try {\r\n            isLoading.value = true\r\n            const result = await getFavoritePhotosAPI()\r\n            if (result && result.code === 0) {\r\n                favoritePhotos.value = result.data || []\r\n                return result.data\r\n            } else {\r\n                uni.showToast({\r\n                    title: result?.msg || '获取收藏失败',\r\n                    icon: 'none'\r\n                })\r\n                return []\r\n            }\r\n        } catch (error) {\r\n            console.error('获取收藏照片失败', error)\r\n            uni.showToast({\r\n                title: '获取收藏失败',\r\n                icon: 'none'\r\n            })\r\n            return []\r\n        } finally {\r\n            isLoading.value = false\r\n        }\r\n    }\r\n\r\n\r\n    return {\r\n        currentAlbumPhotos,\r\n        isLoading,\r\n        favoritePhotos,\r\n        uploadPhotos,\r\n        getAlbumPhotos,\r\n        getPhotoDetail,\r\n        addComment,\r\n        toggleFavorite,\r\n        deletePhoto,\r\n        batchDeletePhotos,\r\n        getFavoritePhotos\r\n    };\r\n});"],"names":["defineStore","ref","uni","uploadPhotosAPI","getAlbumPhotosDetailAPI","getPhotoDetailAPI","addCommentAPI","toggleFavoriteAPI","deletePhotoAPI","batchDeletePhotosAPI","getFavoritePhotosAPI"],"mappings":"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"}